// Docker 


# #Step 1

# FROM node:10-alpine as build-step

# RUN mkdir /app

# WORKDIR /app

# COPY package.json /app

# RUN npm install

# COPY ./ /app

# RUN npm run build

# # Stage 2
# FROM nginx:1.17.1-alpine
# COPY --from=build-step /app/build /usr/share/nginx/html






# #base of node alpine - light image
# FROM node:alpine
# #create a folder in docker
# WORKDIR '/app'

# #copy package.json in same root folder
# COPY package.json ./
# #install the packages
# RUN npm install
# #copy all the content in docker file
# COPY . .
# #run the application
# CMD [ "npm", "start" ]






# FROM node:10 AS builder

# WORKDIR /app

# COPY . .

# RUN npm install
# RUN npm run build


# FROM nginx:alpine

# WORKDIR /usr/share/nginx/html

# COPY --from=builder /app/build /usr/share/nginx/html

# CMD ["nginx","-g","daemon off;"]







# # get the base node image
# FROM node:alpine as builder

# # set the working dir for container
# WORKDIR /frontend

# # copy the json file first
# COPY ./package.json /frontend

# # install npm dependencies
# RUN npm install

# # copy other project files
# COPY . .

# # build the folder
# RUN npm run build

# # Handle Nginx
# FROM nginx
# COPY --from=builder /frontend/build /usr/share/nginx/html
# # Copy the default nginx.conf provided by tiangolo/node-frontend
# COPY --from=builder /nginx/default.conf /etc/nginx/conf.d/default.conf
# # COPY --from=build-stage /app/build/ /usr/share/nginx/html

# # COPY --from=build-stage /nginx.conf /etc/nginx/conf.d/default.conf

# EXPOSE 80
# # Start nginx
# CMD ["nginx", "-g", "daemon off;"]











// Jenkins




// /*=================================Jenkin file for React JS ==========================================*/

// def templatePath = 'https://github.com/Swati8477/React-Demo-OpenShift.git'
// def templateName = 'jenkins-react' 
// pipeline {
//   agent {
//     node {
//       label 'nodejs' 
//     }
//   }
//   options {
//     timeout(time: 20, unit: 'MINUTES') 
//   }
//   stages {
//     stage('preamble') {
//         steps {
//             script {
//                 openshift.withCluster() {
//                     openshift.withProject("swatinegi1482-dev") {
//                         echo "Using project: ${openshift.project()}"
//                     }
//                 }
//             }
//         }
//     }
//     stage('cleanup') {
//       steps {
//         script {
//             openshift.withCluster() {
//                 openshift.withProject("swatinegi1482-dev") {
//                   openshift.selector("all", [ template : templateName ]).delete() 
//                   if (openshift.selector("secrets", templateName).exists()) { 
//                     openshift.selector("secrets", templateName).delete()
//                   }
//                 }
//             }
//         }
//       }
//     }
//     stage('create') {
//       steps {
//         script {
//             openshift.withCluster() {
//                 openshift.withProject("swatinegi1482-dev") {
//                   openshift.newApp(templatePath) 
//                 }
//             }
//         }
//       }
//     }
//     stage('build') {
//       steps {
//         script {
//             openshift.withCluster() {
//                 openshift.withProject("swatinegi1482-dev") {
//                   def builds = openshift.selector("bc", templateName).related('builds')
// 			timeout(5){
//                     		builds.untilEach(1) {
//                       		return (it.object().status.phase == "Complete")
// 		    	}
//                   }
//                 }
//             }
//         }
//       }
//     }
//     stage('deploy') {
//       steps {
//         script {
//             openshift.withCluster() {
//                 openshift.withProject("swatinegi1482-dev") {
//                   def rm = openshift.selector("dc", templateName).rollout().latest()
//                 timeout(5){ 
//                     openshift.selector("dc", templateName).related('pods').untilEach(1) {
//                       return (it.object().status.phase == "Running")
//                     }
//                   }
//                 }
//             }
//         }
//       }
//     }
//     stage('tag') {
//       steps {
//         script {
//             openshift.withCluster() {
//                 openshift.withProject() {
//                   openshift.tag("${templateName}:latest", "${templateName}-staging:latest") 
//                 }
//             }
//         }
//       }
//     }
//   }
// }


/*------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------*/



// pipeline {
//    agent {
//      node {
//       label 'nodejs' 
//     }
//   } 
    
// //   tools {nodejs "node"}
    
//   stages {
        
// //     stage('Git') {
// //       steps {
// //         git 'https://github.com/Swati8477/React-Demo-OpenShift.git'
// //       }
// //     }
     
//     stage('Build') {
//       steps {
//         sh 'npm install'
//          sh 'npm run build'
//       }
//     }  
    
            
//     stage('Test') {
//       steps {
//         sh 'npm test'
//       }
//     }
//   }
// }




/*************************************************************************************/

// def projectName = currentBuild.projectName
// def version = env.BUILD_NUMBER
// def buildTag = env.BUILD_TAG
// def fileName = env.npmPack
// pipeline {
//     agent { 
//     node { label 'nodejs' }
//      }
     
//     environment {
//         CI = 'true'
//         JENKINS_CRUMB = 'curl user username:password "<jenkins-url>/crumbIssuer/api/xml?xpath=concat(//crumbRequestField, \":\",//crumb)"'
		
//     }
//     stages {
//         // stage("Checkout") {
//         //     steps {
//         //         load "environmentVariables.groovy"
//         //         echo "${env.DEV_SCM_REPOSITORY}"
//         //         echo "${env.DEV_SCM_BRANCH}"
//         //         git(url: "${env.DEV_SCM_REPOSITORY}", branch: "${env.DEV_SCM_BRANCH}", poll: true)
//         //     }
//         // }

//         stage("Build") {
//         steps {
//                 echo "Building.."
//                 //sh 'mvn org.codehaus.mojo:exec-maven-plugin:exec'
//                sh 'npm install'
//             }
// 		}
	
		
//         // stage("Quality Gate") {
//         //     steps {
//         //         timeout(time: 1, unit: 'HOURS') {
//         //             // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
//         //             // true = set pipeline to UNSTABLE, false = don't
//         //             // Requires SonarQube Scanner for Jenkins 2.7+
//         //             waitForQualityGate abortPipeline: true
//         //         }
//         //     }
//         // }

//          stage('Test') {
//             steps {
//                 sh "chmod +x -R ${env.WORKSPACE}"
//                 sh 'test.sh'
//             }
//         }

        
//         stage('Pack artefacts'){
//             steps {
//             script {
//                 def npmPack = sh(returnStdout:true, script:'npm pack').trim()
//                 env.npmPack = npmPack
//             	sh "echo ${npmPack}"
//             }   
//             }
//         }

        
//         stage('Archive/Upload Artefact to Nexus'){
 
//                 steps{
//                       nexusArtifactUploader(
// 						    nexusVersion: 'nexus3',
// 						    protocol: 'http',
// 						    nexusUrl: 'localhost:8081',
// 						    groupId: 'com.example',
// 						    version: version,
// 						    repository: 'DynamicsDeveloperReleases',
// 						    credentialsId: 'jenkins-nexus-authentication',
// 						    artifacts: [
// 						        [artifactId: projectName,
// 						         classifier: '',
// 						         file: fileName,
// 						         type: 'tgz']
// 						    			]
//  									)
//                                           }
//                                        }
//     								}

//     post {
//         always {
//           cleanWs() 
          
 
//         }
        
//         success{
            
//                 sh 'git commit "package.json" -m'
            

//         }

        
//         failure {
//              //mail to: 'someone@somewhere.com' , subject: "Status of pipeline: ${currentBuild.fullDisplayName}" , body: "${env.BUILD_URL} has result ${currentBuild.result}"
//         	echo "${currentBuild.projectName} has failed at ${env.BUILD_URL}"
        	
//         }
       
//     }
        
//     }



